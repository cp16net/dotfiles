#+TITLE: Emacs Configuration

Took the idea of orgifiying the emacs configuration from a video i watched talking about [[https://github.com/hrs/dotfiles/blob/master/emacs.d/configuration.org][this emacs configuration]].

* Set personal information

** Who am I? Where am I?

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Craig Vyvial"
	user-mail-address "cp16net@gmail.com"
	calendar-latitude 30.2
	calendar-longitude -97.7
	calendar-standard-time-zone-name "CST"
	calendar-daylight-time-zone-name "CDT"
	calendar-location-name "Austin, TX")
#+END_SRC

* custom file

** because this custom file is autogenerated i move it to a separate location

#+BEGIN_SRC emacs-lisp
  (let ((custom-file "~/.emacs.d/custom.el"))
   (when (file-exists-p custom-file)
     (load-file custom-file))
  )
#+END_SRC

* Package Manager

** el-get is a package installer (maybe better than the default one?)

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/el-get/el-get")

  (unless (require 'el-get nil 'noerror)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")

  ;; packages from recipe files
  (el-get 'sync
	  '(vkill monokai-theme yasnippet yasnippet-snippets
	    go-mode go-eldoc go-autocomplete magit virtualenvwrapper
	    dockerfile-mode helm multiple-cursors yaml-mode
	    sphinx-doc neotree workgroups2 smooth-scrolling el-get
	    projectile helm-projectile nyan-mode switch-window
	    undo-tree flycheck-gometalinter emojify git-gutter
            markdown-mode markdown-toc markdown-preview-mode))
  ;; company-mode go-company

  (if (eq system-type 'darwin)
      ;; something for OS X if true
      ;; optional something if not
      (el-get 'sync '(exec-path-from-shell)))

#+END_SRC

** add package archives

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  ;; (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
  ;; (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
  (package-initialize)
#+END_SRC

* UI Preferences

** Set font size

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :height 105)
  (global-set-key (kbd "C-M--") 'text-scale-decrease)
  (global-set-key (kbd "C-M-+") 'text-scale-increase)
  ;; (defaults)
  ;; C-x C-0 reset font size
  ;; C-x C-- decrease font size
  ;; C-x C-= increase font size
  ;; C-x C-+ increase font size
#+END_SRC

** line numbers

#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode t)
#+END_SRC

** Close Emacs for real?

#+BEGIN_SRC emacs-lisp
  (defun ask-before-closing ()
     "Ask whether or not to close, and then close if y was pressed."
     (interactive)
     (if (y-or-n-p (format "Are you sure you want to exit Emacs? "))
	 (if (< emacs-major-version 22)
	     (save-buffers-kill-terminal)
	   (save-buffers-kill-emacs))
       (message "Canceled exit")))
   (when window-system
     (global-set-key (kbd "C-x C-c") 'ask-before-closing))
#+END_SRC

** store back and autosave file in system tmp

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	      `((".*" ,temporary-file-directory t)))
#+END_SRC

** pretty diff views

#+BEGIN_SRC emacs-lisp
  ;; (global-diff-hl-mode)
  ;; (diff-hl-margin-mode)
#+END_SRC

** smooth scrolling

#+BEGIN_SRC emacs-lisp
  (require 'smooth-scrolling)
  ;; scroll one line at a time (less "jumpy" than defaults)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
#+END_SRC

** theme

#+BEGIN_SRC emacs-lisp
  (load-theme 'monokai t)
#+END_SRC

** trim trailing whitespace

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Tweak window

remove bars at top

#+BEGIN_SRC emacs-lisp
  ;; (menu-bar-mode 0)
  ;; (tool-bar-mode 0)
#+END_SRC

The default frame title isnâ€™t useful. This binds it to the name of the current project:

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC

** flycheck

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

** Allow convert to upcase a region

#+BEGIN_SRC emacs-lisp
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
#+END_SRC

** commenting line

This allows me to comment out the current line i have point on instead of adding a comment at the end of the line.

#+BEGIN_SRC emacs-lisp
  (defun comment-dwim-line (&optional arg)
  "Replacement for the 'comment-dwim' command.
  If no region is selected and current line is not blank and we
  are not at the end of the line, then comment current line.
  Replaces default behaviour of 'comment-dwim', when it inserts
  comment at the end of the line.
  ARG: something?"
    (interactive "*P")
    (comment-normalize-vars)
    (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
	(comment-or-uncomment-region (line-beginning-position) (line-end-position))
      (comment-dwim arg)))
  (global-set-key "\M-;" 'comment-dwim-line)
#+END_SRC

** Follow symlinks automatically

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
  (setq find-file-visit-truename t)
#+END_SRC

** winner mode
#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC

** undo tree
#+BEGIN_SRC emacs-lisp
  (global-undo-tree-mode)
#+END_SRC

** emojify

#+BEGIN_SRC emacs-lisp
  (require 'emojify)
  (add-to-list 'emojify-inhibit-major-modes 'go-mode)
  (add-hook 'after-init-hook #'global-emojify-mode)
#+END_SRC

** git-gutter

#+BEGIN_SRC emacs-lisp
  (global-git-gutter-mode +1)
#+END_SRC

* Custom keybindings

** smart beginning of line

This moves the point to the start of the first character in the line or to the beginning of the line. (love this)

#+BEGIN_SRC emacs-lisp
  (defun smart-beginning-of-line ()
    "Move point to first non-whitespace character or beginning-of-line.

  Move point to the first non-whitespace character on this line.
  If point was already at that position, move point to beginning of line."
    (interactive)
    (let ((oldpos (point)))
      (back-to-indentation)
      (and (= oldpos (point))
	   (beginning-of-line))))
  ;; (global-set-key [s-right] 'move-end-of-line)
  ;; (global-set-key [s-left] 'smart-beginning-of-line)
  (global-set-key [home] 'smart-beginning-of-line)
  (global-set-key (kbd "C-a") 'smart-beginning-of-line)
#+END_SRC

** grep and find files

This is really helpful searching lots of file for a string. Naturally it uses grep.

#+BEGIN_SRC emacs-lisp
  (defvar grep-and-find-map (make-sparse-keymap))
   (define-key global-map "\C-xf" grep-and-find-map)
   (define-key global-map "\C-xfg" 'find-grep-dired)
   (define-key global-map "\C-xff" 'find-name-dired)
   (define-key global-map "\C-xfl" (lambda (dir pattern)
	  (interactive "DFind-name locate-style (directory):
		       \nsFind-name locate-style (filename wildcard): ")
	  (find-dired dir (concat "-name '*" pattern "*'"))))
   (define-key global-map "\C-xg" 'grep)

  (global-set-key (kbd "C-c C-f") 'find-grep-dired)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
#+END_SRC

** custom window switching

This switches to windows around in the buffer. (havnt used this much at all)

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c C-j") 'windmove-left)
  (global-set-key (kbd "C-c C-k") 'windmove-down)
  (global-set-key (kbd "C-c C-l") 'windmove-up)
  (global-set-key (kbd "C-c C-;") 'windmove-right)
  (global-set-key (kbd "M-o") 'other-window)
#+END_SRC

** switch-window pkg

Trying out another tool to switch windows easier. (testing)

#+BEGIN_SRC emacs-lisp
  (require 'switch-window)
  (global-set-key (kbd "C-x o") 'switch-window)
  (global-set-key (kbd "C-c 1") 'switch-window-then-maximize)
  (global-set-key (kbd "C-c 2") 'switch-window-then-split-below)
  (global-set-key (kbd "C-c 3") 'switch-window-then-split-right)
  (global-set-key (kbd "C-c 0") 'switch-window-then-delete)

  (global-set-key (kbd "C-x 4 d") 'switch-window-then-dired)
  (global-set-key (kbd "C-x 4 f") 'switch-window-then-find-file)
  (global-set-key (kbd "C-x 4 r") 'switch-window-then-find-file-read-only)

  (global-set-key (kbd "C-x 4 C-f") 'switch-window-then-find-file)
  (global-set-key (kbd "C-x 4 C-o") 'switch-window-then-display-buffer)

  (global-set-key (kbd "C-x 4 0") 'switch-window-then-kill-buffer)
#+END_SRC

** move lines up/down

Move a line up or down with M-<up> or M-<down>

ref: https://www.emacswiki.org/emacs/MoveLine

#+BEGIN_SRC emacs-lisp
  (defmacro save-column (&rest body)
    `(let ((column (current-column)))
       (unwind-protect
	   (progn ,@body)
	 (move-to-column column))))
  (put 'save-column 'lisp-indent-function 0)

  (defun move-line-up ()
    (interactive)
    (save-column
      (transpose-lines 1)
      (forward-line -2)))

  (defun move-line-down ()
    (interactive)
    (save-column
      (forward-line 1)
      (transpose-lines 1)
      (forward-line -1)))

  (global-set-key (kbd "M-<up>") 'move-line-up)
  (global-set-key (kbd "M-<down>") 'move-line-down)
#+END_SRC

* Programming Customizations

** [[https://magit.vc/manual/][Git integration with Magit]]

#+BEGIN_SRC emacs-lisp
  (require 'magit)
  (define-key global-map (kbd "C-c m") 'magit-status)
  ;; override the mailto keyboard default because i keep screwing up and i dont use it.
  (define-key global-map (kbd "C-x m") 'magit-status)
#+END_SRC

** [[https://github.com/fgallina/python.el][Python]]

*** Virtualenv location for pymacs

#+BEGIN_SRC emacs-lisp
  (push "~/.virtualenvs/default/bin" exec-path)
  (setenv "PATH"
	  (concat
	   "~/.virtualenvs/default/bin" ":"
	   (getenv "PATH")
	   ))
#+END_SRC

*** virtualenv wrapper

#+BEGIN_SRC emacs-lisp
  (require 'virtualenvwrapper)
  (venv-initialize-interactive-shells) ;; if you want interactive shell support
  (venv-initialize-eshell) ;; if you want eshell support
  ;; note that setting `venv-location` is not necessary if you
  ;; use the default location (`~/.virtualenvs`), or if the
  ;; the environment variable `WORKON_HOME` points to the right place
  (setq venv-location "~/.virtualenvs/")
#+END_SRC

*** jedi mode

Jedi needs a python package installed in a virtualenv so set the per-installed venv here.

#+BEGIN_SRC emacs-lisp
  (setq jedi:environment-virtualenv (list (expand-file-name "~/.emacs.d/.python-environments/")))
#+END_SRC

Setup jedi mode to do python code completion with docs.

#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:setup-keys t)                      ; optional
  (setq jedi:complete-on-dot t)                 ; optional
  (setq jedi:environment-root "~/.virtualenvs/")
  (setq jedi:environment-virtualenv nil)
#+END_SRC

*** Sphinx

Sphinx dox enabled for python

#+BEGIN_SRC emacs-lisp
   ;; C-c M-d
  (add-hook 'python-mode-hook (lambda ()
				(require 'sphinx-doc)
				(sphinx-doc-mode t)))
#+END_SRC

** [[https://github.com/dominikh/go-mode.el][go-mode]]

Some of this is taken from these articles
- [[http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/][configure-emacs-as-a-go-editor-from-scratch]]
- http://yousefourabi.com/blog/2014/05/emacs-for-go/

#+BEGIN_SRC emacs-lisp
  ;; Snag the user's PATH and GOPATH
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-env "GOPATH"))

  ;; Define function to call when go-mode loads
  (defun my-go-mode-hook ()
    "Custom go mode hook to load my stuff."
    (setq gofmt-command "goimports")                   ; gofmt uses invokes goimports
    (add-hook 'before-save-hook 'gofmt-before-save)    ; gofmt before every save
       (if (not (string-match "go" compile-command))   ; set compile command default
	(set (make-local-variable 'compile-command)
	     "go build -v && go test -v -race && go vet"))
    (setq compilation-scroll-output 'first-error)      ; auto scroll to the first error on compile

    ;; guru settings
    (go-guru-hl-identifier-mode)                    ; highlight identifiers

    ;; Key bindings specific to go-mode
    (local-set-key (kbd "M-.") 'godef-jump)         ; Go to definition
    (local-set-key (kbd "M-*") 'pop-tag-mark)       ; Return from whence you came
    (local-set-key (kbd "M-p") 'compile)            ; Invoke compiler
    (local-set-key (kbd "M-P") 'recompile)          ; Redo most recent compile cmd
    (local-set-key (kbd "M-]") 'next-error)         ; Go to next error (or msg)
    (local-set-key (kbd "M-[") 'previous-error)     ; Go to previous error or msg
    (local-set-key (kbd "M-\\") 'go-rename)     ; Go to previous error or msg

    ;; Misc go stuff
    (auto-complete-mode 1)                          ; Enable auto-complete mode
  )

  (add-hook 'go-mode-hook 'my-go-mode-hook)

  ;; Connect go-mode-hook with the function we just defined
  ;; trying out company mode here
  ;; (add-hook 'go-mode-hook 'company-mode)
  ;; (add-hook 'go-mode-hook (lambda ()
  ;;   (set (make-local-variable 'company-backends) '(company-go))
  ;;   (company-mode)))

  ;; Ensure the go specific autocomplete is active in go-mode.
  (with-eval-after-load 'go-mode
    (require 'go-autocomplete))

  ;; flycheck gometalinter setup
  (require 'flycheck-gometalinter)
  (eval-after-load 'flycheck
    '(add-hook 'flycheck-mode-hook #'flycheck-gometalinter-setup))

  ;; set the concurrency
  (setq flycheck-gometalinter-concurrency 2)
  ;; skips 'vendor' directories and sets GO15VENDOREXPERIMENT=1
  (setq flycheck-gometalinter-vendor t)
  ;; only show errors
  ;;(setq flycheck-gometalinter-errors-only t)
  ;; only run fast linters
  (setq flycheck-gometalinter-fast t)
  ;; use in tests files
  (setq flycheck-gometalinter-test t)
  ;; disable linters
  ;;(setq flycheck-gometalinter-disable-linters '("gotype" "gocyclo"))
  ;; Only enable selected linters
  ;;(setq flycheck-gometalinter-disable-all t)
  ;;(setq flycheck-gometalinter-enable-linters '("golint"))
  ;; Set different deadline (default: 5s)
  (setq flycheck-gometalinter-deadline "10s")
  ;; Use a gometalinter configuration file (default: nil)
  ;;(setq flycheck-gometalinter-config "/path/to/gometalinter-config.json")
#+END_SRC

I'd like to try out company-mode with go-mode and see if its any better.

** javascript

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC

** [[https://github.com/yoshiki/yaml-mode][yaml-mode]]

#+BEGIN_SRC emacs-lisp
  (require 'yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  ;; make enter <newline> with indent
  (add-hook 'yaml-mode-hook
	    '(lambda ()
	       (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
#+END_SRC

** [[https://github.com/spotify/dockerfile-mode][dockerfile-mode]]

#+BEGIN_SRC emacs-lisp
  (require 'dockerfile-mode)
  (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
#+END_SRC

** [[https://github.com/joaotavora/yasnippet][yasnippet]]

#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
  (yas-global-mode 1)
  (setq yas-load-directory "~/.emacs.d/snippets")
  (add-hook 'term-mode-hook (lambda() (setq yas-dont-activate t)))
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)
#+END_SRC

[[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]] view the snippets for current mode via `M-x yas-describe-tables`

* multiple cursors

This is a really nice way to do multiple edits in a file. I've used ctrl-d in sublime alot and foudn this very similar.

#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)
  ;; add a cursor to each line in selected region
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  ;; add cursor not continuous lines (based on keywords in buffer
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  ;; get out of multiple cursor mode (press <return> or C-g)
  ;; If you want to insert a newline in multiple-cursors-mode, use C-j.
#+END_SRC

* desktop save mode

This allow me to save history and buffers and reopen emacs like it was when i had to exit. This comes in handy when i need to restart my machine for updates or something.

#+BEGIN_SRC emacs-lisp
  (setq desktop-dirname "~/.emacs.d/")
  (desktop-save-mode 1)
   (setq savehist-additional-variables              ;; also save...
	 '(search-ring regexp-search-ring kill-ring);; ... my search entries
	 savehist-file "~/.emacs.d/savehist")           ;; keep my home clean
   (savehist-mode t)                                ;; do customization before activate
   ;; (add-to-list 'savehist-addition-variables 'kill-ring)
#+END_SRC

* helm mode

#+BEGIN_SRC emacs-lisp
  (require 'helm-config)
  (require 'helm)
  (global-set-key (kbd "M-x") #'helm-M-x)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (helm-mode 1)
  (projectile-global-mode)
  (setq projectile-completion-system 'helm)
  (helm-projectile-on)
#+END_SRC

* company mode

AKA complete anything mode.

This mode didnt seem to do much better than autocomplete.

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'after-init-hook 'global-company-mode)

  ;; add python completion for company mode
  ;; (add-hook 'python-mode-hook 'anaconda-mode)
#+END_SRC

* org mode

I like using =TODO->NEXT->IN PROGRES->DONE->CANCELLED= and my progression.

Org docs are stored in my dropbox location to sync with other tools.

#+BEGIN_SRC emacs-lisp
  (require 'org)
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))
  ;; Standard key bindings
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  ;; TODO keywords list setup
  (setq org-todo-keywords
	(quote ((sequence "TODO(t)" "NEXT(n)" "IN PROGRESS(i)" "|" "DONE(d)")
		(sequence "|" "CANCELLED(c)"))))
  (setq org-todo-keyword-faces
	(quote (("TODO" :foreground "red" :weight bold)
		("NEXT" :foreground "yellow" :weight bold)
		("IN PROGRESS" :foreground "green" :weight bold)
		("DONE" :foreground "forest green" :weight bold)
		("CANCELLED" :foreground "forest green" :weight bold)
		)))
  (setq org-default-notes-file "~/Dropbox/orgfiles/notes.org")
  (setq org-agenda-files '("~/Dropbox/orgfiles"))
  (define-key global-map "\C-cc" 'org-capture)
  (define-key global-map "\C-cx"
    (lambda () (interactive) (org-capture nil "t")))

  ;; Make TAB act as if it were issued in a buffer of the languageâ€™s major mode.
  (setq org-src-tab-acts-natively t)

  ;; refiling tasks settings
  ;;(setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  ;;(setq org-refile-use-outline-path 'file)
  ;;(setq org-outline-path-complete-in-steps nil)

  ;; setting up org-protocol mode so that i can capture from browser or other places
  (server-start)
  (require 'org-protocol)

  ;; setup org-protocol to capture links and text from browser
  (defun transform-square-brackets-to-round-ones(string-to-transform)
    "Transforms [ into ( and ] into ), other chars left unchanged."
    (concat
    (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
  )

  (setq org-capture-templates `(
	("p"
	 "Protocol"
	 entry
	 (file+headline "~/Dropbox/orgfiles/notes.org" "Tasks")
	 "* %^{Title of Capture}\nSource: %u, %c\nCaptured On: %U\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n%?" :empty-lines 1)
	("L"
	 "Protocol Link"
	 entry
	 (file+headline "~/Dropbox/orgfiles/notes.org" "Tasks")
	 "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\nCaptured On: %U" :empty-lines 1)
	("t"
	 "TODO"
	 entry
	 (file+headline "~/Dropbox/orgfiles/notes.org" "Tasks")
	 "* TODO %?\n%U" :empty-lines 1)
	;; ... more templates here ...
  ))
#+END_SRC

Add icons to org-agenda categories.
Not working because the hook is bad also tried just using the normal add-to-list and it says the variable list is no defined on startup so it fails.
leaving this in the init.el for now....

#+BEGIN_SRC emacs-lisp
  ;; (add-hook org-add-hook '(lambda ()
  ;; 			  (add-to-list 'org-agenda-category-icon-alist '("Football" "~/.emacs.d/icons/Soccer_ball.png" nil nil :ascent center))
  ;; 			  ))
#+END_SRC

* markdown mode

installed markdown tools

  - markdown-mode
  - markdown-toc (generate toc)
  - markdown-preview-mode
    installed [[https://github.com/markedjs/marked][marked]] `npm install -g marked`
    set the `markdown-command` to marked in init.el

customizations for markdown here

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
#+END_SRC

* emacs neotree

https://github.com/jaypei/emacs-neotree

A nice tree broswer on the side for directories/files.

#+BEGIN_SRC emacs-lisp
  (require 'neotree)
  ;; shortcut for neotree
  (global-set-key [f8] 'neotree-toggle)
  ;; theme icons for tree these look terrible on ubunut linux emacs i've been using so disabling it for now.
  ;; (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  ;; open neotree to file node in tree
  (setq neo-smart-open t)
  ;; projectile switches to the node in the tree automatically
  (setq projectile-switch-project-action 'neotree-projectile-action)
#+END_SRC

* nyan mode

Gotta have some nyan cat mode. :)

#+BEGIN_SRC emacs-lisp
  (nyan-mode 1)
#+END_SRC

* workgroups

Workgroups allows me to setup different windows for different tasks i'm doing. This could be workgroups for org, dev, web, or email. *Required to be at the end.*

#+BEGIN_SRC emacs-lisp
  (require 'workgroups2)
  ;; Change some settings
  (workgroups-mode 1)        ; put this one at the bottom of .emacs
#+END_SRC
